"""Command-line interface for RAGDiff v2.0.

RAGDiff v2.0 uses a domain-based architecture for comparing RAG systems.

Commands:
- run: Execute a query set against a system
- compare: Compare multiple runs using LLM evaluation
"""

from pathlib import Path
from typing import Optional

import typer
from dotenv import load_dotenv
from rich.console import Console
from rich.panel import Panel

from .core.logging import setup_logging

# Load environment variables from .env file
load_dotenv()

# Initialize Typer app
app = typer.Typer(
    name="ragdiff",
    help="RAGDiff v2.0 - Domain-based RAG system comparison",
    add_completion=False,
    no_args_is_help=True,
)

# Initialize Rich console for output
console = Console()


# ============================================================================
# v2.0 Commands (Domain-based architecture)
# ============================================================================

from .cli_v2 import compare as v2_compare
from .cli_v2 import run as v2_run

# Add v2.0 commands as primary commands
app.command(name="run", help="Execute a query set against a system")(v2_run)
app.command(name="compare", help="Compare multiple runs using LLM evaluation")(
    v2_compare
)


@app.command()
def generate_adapter(
    openapi_url: str = typer.Option(
        ..., "--openapi-url", help="URL to OpenAPI specification"
    ),
    api_key: str = typer.Option(..., "--api-key", help="API key for authentication"),
    test_query: str = typer.Option(..., "--test-query", help="Test query to execute"),
    adapter_name: str = typer.Option(
        ..., "--adapter-name", help="Name for the adapter"
    ),
    output: Optional[str] = typer.Option(
        None, "--output", "-o", help="Output file path (default: stdout)"
    ),
    endpoint: Optional[str] = typer.Option(
        None, "--endpoint", help="Override endpoint path"
    ),
    method: Optional[str] = typer.Option(None, "--method", help="Override HTTP method"),
    model: str = typer.Option(
        "claude-3-5-sonnet-20241022", "--model", "-m", help="LLM model for generation"
    ),
    verbose: bool = typer.Option(
        False, "--verbose", "-v", help="Enable verbose output"
    ),
):
    """Generate OpenAPI adapter configuration from specification.

    This command automatically generates a RAGDiff adapter configuration by:
    1. Fetching and parsing the OpenAPI specification
    2. Using AI to identify the search endpoint (or using --endpoint override)
    3. Making a test query to analyze the response structure
    4. Generating JMESPath mappings with AI
    5. Creating a complete YAML configuration file

    Example:
        ragdiff generate-adapter \\
            --openapi-url https://api.example.com/openapi.json \\
            --api-key $MY_API_KEY \\
            --test-query "test search" \\
            --adapter-name my-api \\
            --output configs/my-api.yaml

    Requirements:
        - OpenAPI 3.x specification URL
        - API key with search permissions
        - ANTHROPIC_API_KEY or OPENAI_API_KEY environment variable (for AI generation)
    """
    setup_logging(verbose)

    try:
        import yaml

        from .openapi import ConfigGenerator

        console.print(
            Panel(
                "[cyan]OpenAPI Adapter Generator[/cyan]\n\n"
                f"Spec URL: {openapi_url}\n"
                f"Adapter Name: {adapter_name}\n"
                f"AI Model: {model}",
                title="Starting Generation",
                border_style="cyan",
            )
        )

        # Initialize generator
        console.print("\n[cyan]Initializing AI-powered generator...[/cyan]")
        generator = ConfigGenerator(model=model)

        # Generate configuration
        console.print(
            f"\n[cyan]Generating configuration for '{adapter_name}'...[/cyan]"
        )
        console.print("[dim]This may take 30-60 seconds...[/dim]\n")

        config = generator.generate(
            openapi_url=openapi_url,
            api_key=api_key,
            test_query=test_query,
            adapter_name=adapter_name,
            endpoint=endpoint,
            method=method,
        )

        # Format as YAML with comments
        yaml_content = f"""# Generated by: ragdiff generate-adapter
# OpenAPI Spec: {openapi_url}
# Generated: {__import__('datetime').datetime.now().isoformat()}
#
# Usage:
#   export {config[adapter_name]['api_key_env']}=your_api_key_here
#   ragdiff query "your query" --tool {adapter_name} --config path/to/this/file.yaml

"""
        yaml_content += yaml.dump(config, default_flow_style=False, sort_keys=False)

        # Output configuration
        if output:
            output_path = Path(output)
            output_path.parent.mkdir(parents=True, exist_ok=True)
            output_path.write_text(yaml_content)
            console.print(f"\n[green]✓[/green] Configuration saved to: {output}")
        else:
            console.print("\n[cyan]Generated Configuration:[/cyan]")
            console.print(Panel(yaml_content, border_style="green"))

        # Show usage instructions
        console.print(
            Panel(
                f"[green]✓ Configuration generated successfully![/green]\n\n"
                f"[cyan]Next steps:[/cyan]\n"
                f"1. Set environment variable:\n"
                f"   export {config[adapter_name]['api_key_env']}=your_api_key_here\n\n"
                f"2. Test the adapter:\n"
                f"   ragdiff query \"test\" --tool {adapter_name} --config {output or 'config.yaml'}\n\n"
                f"3. Customize the config if needed (edit response_mapping, auth, etc.)",
                title="Success",
                border_style="green",
            )
        )

    except Exception as e:
        console.print(f"\n[red]✗ Error: {e}[/red]")
        if verbose:
            console.print_exception()
        raise typer.Exit(1) from e


if __name__ == "__main__":
    app()
