# MongoDB Vector Search configuration example
#
# Prerequisites:
# 1. Local MongoDB Community Edition OR MongoDB Atlas
# 2. Vector index created on your collection (see notes below)
# 3. Documents with embedded vectors in your collection
# 4. sentence-transformers library installed
#
# Environment variables required:
# - MONGODB_URI: MongoDB connection string
#   Local: mongodb://localhost:27017/
#   Atlas: mongodb+srv://user:pass@cluster.mongodb.net/

tools:
  # MongoDB Vector Search with sentence-transformers (local, free)
  mongodb:
    # MongoDB connection string environment variable
    api_key_env: MONGODB_URI

    # MongoDB database and collection settings (required)
    options:
      database: squad_db               # Your database name
      collection: contexts             # Your collection name
      index_name: vector_index          # Vector search index name

      # Field mappings (optional - these are the defaults)
      vector_field: embedding           # Field containing vector embeddings
      text_field: text                  # Field containing text content
      source_field: source              # Field containing source information

      # Metadata fields to include in results (optional)
      metadata_fields:
        - article_title                 # Article title
        - num_questions                 # Number of questions

      # Embedding configuration (sentence-transformers)
      embedding_model: all-MiniLM-L6-v2  # Sentence-transformer model
      # Options:
      #   - all-MiniLM-L6-v2 (384 dims, fast, default)
      #   - all-mpnet-base-v2 (768 dims, better quality)
      #   - all-MiniLM-L12-v2 (384 dims, good balance)

    # General settings
    timeout: 60
    default_top_k: 5

# LLM evaluation configuration (optional - used for quality scoring)
llm:
  model: claude-sonnet-4-5
  api_key_env: ANTHROPIC_API_KEY
  max_tokens: 16384
  temperature: 0.1

# Notes on MongoDB Vector Index:
#
# For LOCAL MongoDB Community Edition:
# Use a basic index (vector search is limited in community edition):
#
# mongosh
# use squad_db
# db.contexts.createIndex({ "embedding": "2dsphere" }, { name: "vector_index" })
#
# For MongoDB Atlas (advanced vector search):
# Create a vector search index via Atlas UI:
# {
#   "fields": [
#     {
#       "type": "vector",
#       "path": "embedding",
#       "numDimensions": 384,           # Must match your model (384 for all-MiniLM-L6-v2)
#       "similarity": "cosine"          # or "dotProduct" or "euclidean"
#     },
#     {
#       "type": "filter",
#       "path": "article_title"         # Optional: for metadata filtering
#     }
#   ]
# }
#
# Embedding dimensions by sentence-transformer model:
# - all-MiniLM-L6-v2: 384 dimensions
# - all-mpnet-base-v2: 768 dimensions
# - all-MiniLM-L12-v2: 384 dimensions
#
# Cost:
# - sentence-transformers: FREE (runs locally)
# - Local MongoDB: FREE
# - MongoDB Atlas: Varies by tier
#
# For more information:
# - MongoDB Community: https://www.mongodb.com/try/download/community
# - Sentence-Transformers: https://www.sbert.net/
